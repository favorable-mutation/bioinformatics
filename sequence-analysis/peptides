#!/usr/bin/env python3

# ---------------------------------------------------------------
# This script is for use in analyzing protein sequences. It takes
# any number of FASTA-formatted amino acid sequences, a number,
# and a specific amino acid, and returns all peptides with
# the given number of residues that begin with the given
# amino acid within all given sequences.

# The script defaults to M (methionine) for the amino acid,
# and 20 for the number of residues. When counting residues,
# the script counts the given amino acid.
# --------------------------------------------------------------

# import the 'argparse' module to allow passing commandline arguments
# to the script
import argparse

# initialize the variable 'parser' as a new argument parser generated
# by the 'ArgumentParser' method of the 'argparse' module
parser = argparse.ArgumentParser(description='This script is for use \
        in analyzing protein sequences. It takes any number of FASTA-formatted \
        amino acid sequences, a number, and a specific amino acid, and returns \
        all peptides with the given number of residues that begin with the given \
        amino acid within all given sequences. \
        The script defaults to M (methionine) for the amino acid, \
        and 20 for the number of residues. When counting residues, \
        the script counts the given amino acid.')

# add an argument 'sequence' to the 'parser' object representing a list of
# files containing FASTA-formatted sequences; python will automatically run the
# open() method on the given files
parser.add_argument('sequence', type=argparse.FileType('r'), nargs='+',
        help='One or more plaintext files containing one or more \
                FASTA-formatted protein sequences.')

# add an argument 'amino_acid' to the 'parser' object representing a
# non-empty list of single letter amino acid encodings
parser.add_argument('-a', '--amino_acid', default='M',
        help='A single letter corresponding to an amino acid (e.g. \
                A for arginine). Defaults to M (methionine). Can be \
                used to indicate a sequence of amino acids instead if used with \
                the --long argument.')

# add an argument 'residues' to the 'parser' object representing the
# length of the peptide(s) to return
parser.add_argument('-r', '--residues', type=int, default=1,
        help='An integer signifying the desired peptide length. \
                Defaults to 1.')

# assign the variable 'args' to the result of calling the 'parse_args'
# method of the 'parser' object
args = parser.parse_args()

# TODO
# define a function to find subsequences in all given sequences that fit the
# given requirements
def processFASTA(LOF, acid, length):
    sep = ""
    for inputfile in LOF:
        seq = ""
        for line in inputfile:
            if line.startswith(">") and seq == "":
                seqname = line.replace("\n", "")
            elif line.startswith(">"):
                searchSeq(seq, seqname, acid, length, sep)
                seq = ""
                sep = "\n"
                seqname = line.replace("\n", "")
            else:
                seq += line.replace("\n", "")
        searchSeq(seq, seqname, acid, length, sep)

# TODO
# define a function to search a string representing a sequence of amino acids
# for a given amino acid
def searchSeq(sequence, name, acid, length, sep):
    place = 0
    for i in range(sequence.count(acid)):
        start = sequence.find(acid, place)
        subseq = sequence[start:(start + length)]
        trunc = name[:name.find("|")]
        print(sep + trunc + f"_{i + 1}" + "\n" + subseq)
        place = start + 1

# return all peptides with the number of residues given by the 'residues'
# argument that begin with the amino acid given by the 'amino_acid' argument
# that can be found within the sequences given by the 'sequence' argument
processFASTA(args.sequence, args.amino_acid, args.residues)
